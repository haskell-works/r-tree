jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: 'macOS-10.13'

  strategy:
    matrix:
      ghc-8.6.5:
        GHC_VER: "8.6.5"

  steps:
    - script: |
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      displayName: Install homebrew

    - script: |
        brew install jq
      displayName: Install jq

    - script: |
        export PATH=$HOME/.local/bin:$HOME/.cabal/bin:$HOME/.ghcup/bin:/usr/local/bin:$PATH
        mkdir -p "$HOME/.local/bin"
        BUILD_ARCH=x86_64
        BUILD_OS_NAME=osx
        if [ "$CABAL_CACHE_VERSION" = "latest" ]; then
          echo "Downloading: https://github.com/haskell-works/cabal-cache/releases/latest/download/cabal-cache_${BUILD_ARCH}_${BUILD_OS_NAME}.tar.gz"
          curl -Ls https://github.com/haskell-works/cabal-cache/releases/latest/download/cabal-cache_${BUILD_ARCH}_${BUILD_OS_NAME}.tar.gz | tar -xvz -C "$HOME/.local/bin/"
        else
          echo "Downloading: https://github.com/haskell-works/cabal-cache/releases/download/${CABAL_CACHE_TAG}/cabal-cache_${BUILD_ARCH}_${BUILD_OS_NAME}.tar.gz"
          curl -Ls https://github.com/haskell-works/cabal-cache/releases/download/${CABAL_CACHE_TAG}/cabal-cache_${BUILD_ARCH}_${BUILD_OS_NAME}.tar.gz | tar -xvz -C "$HOME/.local/bin/"
        fi
        curl -Ls https://github.com/haskell-works/cabal-cache/releases/download/${CABAL_CACHE_TAG}/cabal-cache_${BUILD_ARCH}_${BUILD_OS_NAME}.tar.gz | tar -xvz -C "$HOME/.local/bin/"
        echo 'export PATH="$HOME/.local/bin/:$PATH"' >> "$HOME/.bashrc"
        cabal-cache version
      env:
        CABAL_CACHE_VERSION: $(CABAL_CACHE_VERSION)
      displayName: Install binary cache tool (cabal-cache)

    - script: |
        curl https://raw.githubusercontent.com/haskell/ghcup/master/bootstrap-haskell -sSf | BOOTSTRAP_HASKELL_NONINTERACTIVE=1 sh
        . "$HOME/.ghcup/env"
        echo '. $HOME/.ghcup/env' >> "$HOME/.bashrc"
      displayName: Install GHC Up

    - script: |
        export PATH=$HOME/.local/bin:$HOME/.cabal/bin:$HOME/.ghcup/bin:/usr/local/bin:$PATH
        ghcup install ${GHC_VER}
        ghcup set ${GHC_VER}
      displayName: Install GHC

    - script: |
        export PATH=$HOME/.local/bin:$HOME/.cabal/bin:$HOME/.ghcup/bin:/usr/local/bin:$PATH
        ghc --version && cabal --version
      displayName: Print GHC version

    - script: |
        export PATH=$HOME/.local/bin:$HOME/.cabal/bin:$HOME/.ghcup/bin:/usr/local/bin:$PATH
        cabal v2-update
      displayName: Run cabal update

    - script: |
        export PATH=$HOME/.local/bin:$HOME/.cabal/bin:$HOME/.ghcup/bin:/usr/local/bin:$PATH
        cabal v2-configure --enable-tests --enable-benchmarks
      displayName: Configure project

    - script: |
        export PATH=$HOME/.local/bin:$HOME/.cabal/bin:$HOME/.ghcup/bin:/usr/local/bin:$PATH
        cabal-cache sync-to-archive               \
          --threads      "$BINARY_CACHE_THREADS"  \
          --archive-uri  "$BINARY_CACHE_URI"      \
          --region       "$BINARY_CACHE_REGION"
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        BINARY_CACHE_URI: $(BINARY_CACHE_URI)
        BINARY_CACHE_REGION: $(BINARY_CACHE_REGION)
        BINARY_CACHE_THREADS: $(BINARY_CACHE_THREADS)
      displayName: Restore binary cache

    - script: |
        echo $HOME/.cabal/packages/hackage.haskell.org/
        ls $HOME/.cabal/packages/hackage.haskell.org/
        export PATH=$HOME/.local/bin:$HOME/.cabal/bin:$HOME/.ghcup/bin:/usr/local/bin:$PATH
        cabal v2-build -j4 +RTS -A32m -RTS --enable-tests --enable-benchmarks
      displayName: Build project


    - script: |
        export PATH=$HOME/.local/bin:$HOME/.cabal/bin:$HOME/.ghcup/bin:/usr/local/bin:$PATH
        cabal-cache sync-to-archive               \
          --threads      "$BINARY_CACHE_THREADS"  \
          --archive-uri  "$BINARY_CACHE_URI"      \
          --region       "$BINARY_CACHE_REGION"
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        BINARY_CACHE_URI: $(BINARY_CACHE_URI)
        BINARY_CACHE_REGION: $(BINARY_CACHE_REGION)
        BINARY_CACHE_THREADS: $(BINARY_CACHE_THREADS)
      displayName: Save binary cache

    # - task: GithubRelease@0
    #   displayName: GitHub Release
    #   inputs:
    #     githubConnection: hw-release
    #     action: edit
    #     repositoryName: haskell-works/cabal-cache
    #     target: $(Build.SourceVersion)
    #     tagSource: manual
    #     tag: $(Build.BuildNumber)
